/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package escenariocomplexo;

import escenariocomplexo.Database.DatabaseManager;
import escenariocomplexo.Objects.Cita;
import escenariocomplexo.Objects.ListadoPerrucaria;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author usuario
 */
public class IFrmResultadosCitasPerruqueria extends javax.swing.JInternalFrame {

    private Vector citasFiltradas;

    public IFrmResultadosCitasPerruqueria(Vector citasFiltradas) {
        initComponents();
        this.citasFiltradas = citasFiltradas;

       
        DefaultTableModel modeloNoEditable = new DefaultTableModel(
                new Object[][]{},
                new String[]{"PROPIETARIO", "CAN", "DATA", "HORA"}
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Hacer que ninguna celda sea editable
            }
        };

        
        tableResultados.setModel(modeloNoEditable);

       
        anhadirAlPanel();
    }

    /**
     * Creates new form IFrmResultadosCitasPerruqueria
     */
    public IFrmResultadosCitasPerruqueria() {
        initComponents();
        anhadirAlPanel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        buttonVolver = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableResultados = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        buttonBorrarSeleccionado = new javax.swing.JButton();
        buttonBorrarTodos = new javax.swing.JButton();

        getContentPane().setLayout(new java.awt.GridBagLayout());

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jPanel3.setBackground(new java.awt.Color(102, 255, 102));
        jPanel3.setLayout(new java.awt.GridBagLayout());

        buttonVolver.setText("Volver");
        jPanel3.add(buttonVolver, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LAST_LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        jPanel1.add(jPanel3, gridBagConstraints);

        tableResultados.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "PROPIETARIO", "CAN", "DATA", "HORA"
            }
        ));
        jScrollPane1.setViewportView(tableResultados);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.9;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jScrollPane1, gridBagConstraints);

        jPanel2.setLayout(new java.awt.GridBagLayout());

        buttonBorrarSeleccionado.setText("Borrar Seleccionado");
        buttonBorrarSeleccionado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBorrarSeleccionadoActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(buttonBorrarSeleccionado, gridBagConstraints);

        buttonBorrarTodos.setText("Borrar Todos");
        buttonBorrarTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonBorrarTodosActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel2.add(buttonBorrarTodos, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        jPanel1.add(jPanel2, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        getContentPane().add(jPanel1, gridBagConstraints);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonBorrarSeleccionadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBorrarSeleccionadoActionPerformed

        int indice = tableResultados.getSelectedRow();
    if (indice != -1) { // Verificar que hay una fila seleccionada
        DefaultTableModel modelo = (DefaultTableModel) tableResultados.getModel();
        
        // Eliminar la cita del DatabaseManager usando el valor de la primera columna
        Object codigo = modelo.getValueAt(indice, 0);
        DatabaseManager.eliminarCitaPorCodigo(codigo);
        
        // Eliminar la fila del modelo
        modelo.removeRow(indice);
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione una fila para eliminar.", 
                                      "Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_buttonBorrarSeleccionadoActionPerformed

    private void buttonBorrarTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonBorrarTodosActionPerformed
               
    }//GEN-LAST:event_buttonBorrarTodosActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonBorrarSeleccionado;
    private javax.swing.JButton buttonBorrarTodos;
    private javax.swing.JButton buttonVolver;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tableResultados;
    // End of variables declaration//GEN-END:variables

    private void anhadirAlPanel() {
        DefaultTableModel tableModel = (DefaultTableModel) tableResultados.getModel();
        tableModel.setRowCount(0);
        citasFiltradas.forEach(_item -> {
            ListadoPerrucaria listadoPerrucaria = (ListadoPerrucaria) _item;
            Object[] linea = {listadoPerrucaria, listadoPerrucaria.getCan(), listadoPerrucaria.getData(), listadoPerrucaria.getHora()};
            tableModel.addRow(linea);
        });
    }
}
